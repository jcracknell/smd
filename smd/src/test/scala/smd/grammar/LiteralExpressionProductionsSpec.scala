package smd
package grammar

class LiteralExpressionProductionsSpec extends ProductionSpec {
  def subject = Grammar.literalExpression

  describe("NumericLiteralExpression") {
    shouldParse("0")      as expression.NumericLiteral(0d)
    shouldParse(".0123")  as expression.NumericLiteral(0.0123d)
    shouldParse("12.345") as expression.NumericLiteral(12.345d)
    shouldParse("12e1")   as expression.NumericLiteral(120d)
    shouldParse("12E2")   as expression.NumericLiteral(1200d)
    shouldParse("0x1234") as expression.NumericLiteral(0x1234.toDouble)
  }
  describe("StringLiteralExpression") {
    shouldParse("''")           as expression.StringLiteral("")
    shouldParse("\"\"")         as expression.StringLiteral("")
    shouldParse("``")           as expression.VerbatimLiteral("")
    shouldParse("'a'")          as expression.StringLiteral("a")
    shouldParse("\"a\"")        as expression.StringLiteral("a")
    shouldParse("`a`")          as expression.VerbatimLiteral("a")
    shouldParse("````````````a````````````") as expression.VerbatimLiteral("a")
    shouldParse("'\\0z'")       as expression.StringLiteral("0z")
    shouldParse("`\\0z`")       as expression.VerbatimLiteral("\\0z")
    shouldParse("'\\x00z'")     as expression.StringLiteral("\0z")
    shouldParse("`\\x00z`")     as expression.VerbatimLiteral("\\x00z")
    shouldParse("'\\x4a'")      as expression.StringLiteral("J")
    shouldParse("`\\x4z`")      as expression.VerbatimLiteral("\\x4z")
    shouldParse("'\\u0000z'")   as expression.StringLiteral("\0z")
    shouldParse("'\\x0000z'")   as expression.StringLiteral("\0z")
    shouldParse("'\\#u0000z'")  as expression.StringLiteral("\0z")
    shouldParse("'\\#x0000z'")  as expression.StringLiteral("\0z")
    shouldParse("'\\u0000;z'")  as expression.StringLiteral("\0z")
    shouldParse("'\\x0000;z'")  as expression.StringLiteral("\0z")
    shouldParse("`\\u0000z`")   as expression.VerbatimLiteral("\\u0000z")
    shouldParse("'\\u004a'")    as expression.StringLiteral("J")
    shouldParse("'\\#u4a'")     as expression.StringLiteral("J")
    shouldParse("'\\#u4a;'")    as expression.StringLiteral("J")
    shouldParse("'\\u4a;'")     as expression.StringLiteral("J")
    shouldParse("`\\u004z`")    as expression.VerbatimLiteral("\\u004z")
    shouldParse("'\\eacutez'")  as expression.StringLiteral("eacutez")
    shouldParse("'\\eacute;z'") as expression.StringLiteral("éz")
  }
  describe("IriLiteralExpression") {
    shouldParse("nullish") as expression.IriLiteral("nullish")
    shouldParse("trueish") as expression.IriLiteral("trueish")
    shouldParse("falsey") as expression.IriLiteral("falsey")
    shouldParse("http://www.google.com") as expression.IriLiteral("http://www.google.com")
    shouldParse("http://msdn.microsoft.com/en-us/library/a6td98xe(v=vs.71).aspx") as expression.IriLiteral("http://msdn.microsoft.com/en-us/library/a6td98xe(v=vs.71).aspx")
    //shouldParse("http://msdn.microsoft.com/en-us/library/a6td98xev=vs.71).aspx") as expression.IriLiteral("http://msdn.microsoft.com/en-us/library/a6td98xev=vs.71")
    shouldParse("http://bücher.de/") as expression.IriLiteral("http://bücher.de/")
    shouldParse("my:irn:scheme:24") as expression.IriLiteral("my:irn:scheme:24")
    shouldParse("http://www.cracknell.ca") as expression.IriLiteral("http://www.cracknell.ca")
    shouldParse("http://www.cracknell.ca/") as expression.IriLiteral("http://www.cracknell.ca/")
    shouldParse("http://www.cracknell.ca/some/path") as expression.IriLiteral("http://www.cracknell.ca/some/path")
    shouldParse("http://www.cracknell.ca?q=bla") as expression.IriLiteral("http://www.cracknell.ca?q=bla")
    shouldParse("http://www.cracknell.ca#fragment") as expression.IriLiteral("http://www.cracknell.ca#fragment")
    shouldParse("http://www.cracknell.ca/some/path?q=bla") as expression.IriLiteral("http://www.cracknell.ca/some/path?q=bla")
    shouldParse("http://www.cracknell.ca/some/path#fragment") as expression.IriLiteral("http://www.cracknell.ca/some/path#fragment")
    shouldParse("http://www.cracknell.ca/some/path?q=bla#fragment") as expression.IriLiteral("http://www.cracknell.ca/some/path?q=bla#fragment")
    shouldParse("www.cracknell.ca") as expression.IriLiteral("www.cracknell.ca")
    shouldParse("www.cracknell.ca/") as expression.IriLiteral("www.cracknell.ca/")
    shouldParse("www.cracknell.ca/some/path") as expression.IriLiteral("www.cracknell.ca/some/path")
    shouldParse("www.cracknell.ca?q=bla") as expression.IriLiteral("www.cracknell.ca?q=bla")
    shouldParse("www.cracknell.ca#fragment") as expression.IriLiteral("www.cracknell.ca#fragment")
    shouldParse("www.cracknell.ca/some/path?q=bla") as expression.IriLiteral("www.cracknell.ca/some/path?q=bla")
    shouldParse("www.cracknell.ca/some/path#fragment") as expression.IriLiteral("www.cracknell.ca/some/path#fragment")
    shouldParse("www.cracknell.ca/some/path?q=bla#fragment") as expression.IriLiteral("www.cracknell.ca/some/path?q=bla#fragment")
    shouldParse("james@www.cracknell.ca") as expression.IriLiteral("james@www.cracknell.ca")
    shouldParse("www.cracknell.ca:80") as expression.IriLiteral("www.cracknell.ca:80")
    shouldParse("james@www.cracknell.ca:80") as expression.IriLiteral("james@www.cracknell.ca:80")
    shouldParse("123.234.210.10") as expression.IriLiteral("123.234.210.10")
    shouldParse("james@123.234.210.10") as expression.IriLiteral("james@123.234.210.10")
    shouldParse("123.234.210.10:80") as expression.IriLiteral("123.234.210.10:80")
    shouldParse("james@123.234.210.10:80") as expression.IriLiteral("james@123.234.210.10:80")
    shouldParse("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]") as expression.IriLiteral("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]")
    shouldParse("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]") as expression.IriLiteral("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]")
    shouldParse("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80") as expression.IriLiteral("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80")
    shouldParse("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80") as expression.IriLiteral("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80")
    shouldParse("/") as expression.IriLiteral("/")
    shouldParse("/some/path") as expression.IriLiteral("/some/path")
    shouldParse("/some/path/") as expression.IriLiteral("/some/path/")
    shouldParse("/?q=bla") as expression.IriLiteral("/?q=bla")
    shouldParse("/#fragment") as expression.IriLiteral("/#fragment")
    shouldParse("/some/path?q=bla") as expression.IriLiteral("/some/path?q=bla")
    shouldParse("/some/path#fragment") as expression.IriLiteral("/some/path#fragment")
    shouldParse("/some/path?q=bla#fragment") as expression.IriLiteral("/some/path?q=bla#fragment")
    shouldParse("path") as expression.IriLiteral("path")
    shouldParse("some/path") as expression.IriLiteral("some/path")
    shouldParse("?q=bla") as expression.IriLiteral("?q=bla")
    shouldParse("#fragment") as expression.IriLiteral("#fragment")
    shouldParse("some/path?q=bla") as expression.IriLiteral("some/path?q=bla")
    shouldParse("some/path#fragment") as expression.IriLiteral("some/path#fragment")
    shouldParse("some/path?q=bla#fragment") as expression.IriLiteral("some/path?q=bla#fragment")
    //shouldParse("http://www.cracknell.ca/a,") as expression.IriLiteral("http://www.cracknell.ca/a,")
    shouldParse("http://www.cracknell.ca/a,a") as expression.IriLiteral("http://www.cracknell.ca/a,a")
    //shouldParse("http://www.cracknell.ca?q=a,") as expression.IriLiteral("http://www.cracknell.ca?q=a,")
    shouldParse("http://www.cracknell.ca?q=a,a") as expression.IriLiteral("http://www.cracknell.ca?q=a,a")
    //shouldParse("http://www.cracknell.ca/a:") as expression.IriLiteral("http://www.cracknell.ca/a:")
    shouldParse("http://www.cracknell.ca/a:a") as expression.IriLiteral("http://www.cracknell.ca/a:a")
    //shouldParse("http://www.cracknell.ca?q=a:") as expression.IriLiteral("http://www.cracknell.ca?q=a:")
    shouldParse("http://www.cracknell.ca?q=a:a") as expression.IriLiteral("http://www.cracknell.ca?q=a:a")
    //shouldParse("http://www.cracknell.ca/a;") as expression.IriLiteral("http://www.cracknell.ca/a;")
    shouldParse("http://www.cracknell.ca/a;a") as expression.IriLiteral("http://www.cracknell.ca/a;a")
    //shouldParse("http://www.cracknell.ca?q=a;") as expression.IriLiteral("http://www.cracknell.ca?q=a;")
    shouldParse("http://www.cracknell.ca?q=a;a") as expression.IriLiteral("http://www.cracknell.ca?q=a;a")
    shouldParse("abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd") as expression.IriLiteral("abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd")
    shouldParse("123.123.123.123") as expression.IriLiteral("123.123.123.123")
    shouldParse("1.1.1.1") as expression.IriLiteral("1.1.1.1")
    shouldParse("0.0.0.0") as expression.IriLiteral("0.0.0.0")

    // RFC 2732 example IPv6 urls
    shouldParse("http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html") as expression.IriLiteral("http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html")
    shouldParse("http://[1080:0:0:0:8:800:200C:417A]/index.html") as expression.IriLiteral("http://[1080:0:0:0:8:800:200C:417A]/index.html")
    shouldParse("http://[3ffe:2a00:100:7031::1]") as expression.IriLiteral("http://[3ffe:2a00:100:7031::1]")
    shouldParse("http://[1080::8:800:200C:417A]/foo") as expression.IriLiteral("http://[1080::8:800:200C:417A]/foo")
    shouldParse("http://[::192.9.5.5]/ipng") as expression.IriLiteral("http://[::192.9.5.5]/ipng")
    shouldParse("http://[::FFFF:129.144.52.38]:80/index.html") as expression.IriLiteral("http://[::FFFF:129.144.52.38]:80/index.html")
    shouldParse("http://[2010:836B:4179::836B:4179]") as expression.IriLiteral("http://[2010:836B:4179::836B:4179]")
    // RFC 2732 example IPv6 urls with no scheme
    shouldParse("[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html") as expression.IriLiteral("[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html")
    shouldParse("[1080:0:0:0:8:800:200C:417A]/index.html") as expression.IriLiteral("[1080:0:0:0:8:800:200C:417A]/index.html")
    shouldParse("[3ffe:2a00:100:7031::1]") as expression.IriLiteral("[3ffe:2a00:100:7031::1]")
    shouldParse("[1080::8:800:200C:417A]/foo") as expression.IriLiteral("[1080::8:800:200C:417A]/foo")
    shouldParse("[::192.9.5.5]/ipng") as expression.IriLiteral("[::192.9.5.5]/ipng")
    shouldParse("[::FFFF:129.144.52.38]:80/index.html") as expression.IriLiteral("[::FFFF:129.144.52.38]:80/index.html")
    shouldParse("[2010:836B:4179::836B:4179]") as expression.IriLiteral("[2010:836B:4179::836B:4179]")
  }
}
