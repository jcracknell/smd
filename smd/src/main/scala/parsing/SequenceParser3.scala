package smd
package parsing

import scala.{Product, Product3}

// THIS FILE IS AUTOMATICALLY GENERATED
// Generated at: 2013-09-01T23:01:53Z

/** Parses 3 expressions, providing strongly-typed results.
  * 
  * @param  _1  the 1th parser in the sequence.
  * @tparam T1  the product type of the 1th parser in the sequence.
  * @param  _2  the 2th parser in the sequence.
  * @tparam T2  the product type of the 2th parser in the sequence.
  * @param  _3  the 3th parser in the sequence.
  * @tparam T3  the product type of the 3th parser in the sequence.
  */
case class SequenceParser3[+T1, +T2, +T3](
  _1: Parser[T1], _2: Parser[T2], _3: Parser[T3]
) extends Product3[Parser[T1], Parser[T2], Parser[T3]]
     with Product
     with Parser[(T1, T2, T3)]
{
  def parse(context: ParsingContext): ParsingResult[(T1, T2, T3)] = {
    val rb = context.resultBuilder

    val r1 = _1.parse(context)
    if(r1.failed) return rb.failure

    val r2 = _2.parse(context)
    if(r2.failed) return rb.failure

    val r3 = _3.parse(context)
    if(r3.failed) return rb.failure

    rb.success((r1.product, r2.product, r3.product))
  }
}

object SequenceParser3 {
  /** Implicit [[smd.parsing.SequencingHeuristic]] which can be used to combine an [[smd.parsing.SequenceParser3]]
    * and an [[smd.parsing.Parser]] into an [[smd.parsing.SequenceParser4]]. */
  implicit def sequencingHeuristic[T1, T2, T3, A]: SequencingHeuristic[
    /*  left: */ SequenceParser3[T1, T2, T3],
    /* right: */ Parser[A],
    /*  dest: */ SequenceParser4[T1, T2, T3, A]
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser4(l._1, l._2, l._3, r))
}