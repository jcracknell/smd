package smd
package parsing

import scala.{Product, Product16}

// THIS FILE IS AUTOMATICALLY GENERATED
// Generated at: 2013-09-01T23:01:53Z

/** Parses 16 expressions, providing strongly-typed results.
  * 
  * @param  _1  the 1th parser in the sequence.
  * @tparam T1  the product type of the 1th parser in the sequence.
  * @param  _2  the 2th parser in the sequence.
  * @tparam T2  the product type of the 2th parser in the sequence.
  * @param  _3  the 3th parser in the sequence.
  * @tparam T3  the product type of the 3th parser in the sequence.
  * @param  _4  the 4th parser in the sequence.
  * @tparam T4  the product type of the 4th parser in the sequence.
  * @param  _5  the 5th parser in the sequence.
  * @tparam T5  the product type of the 5th parser in the sequence.
  * @param  _6  the 6th parser in the sequence.
  * @tparam T6  the product type of the 6th parser in the sequence.
  * @param  _7  the 7th parser in the sequence.
  * @tparam T7  the product type of the 7th parser in the sequence.
  * @param  _8  the 8th parser in the sequence.
  * @tparam T8  the product type of the 8th parser in the sequence.
  * @param  _9  the 9th parser in the sequence.
  * @tparam T9  the product type of the 9th parser in the sequence.
  * @param  _10 the 10th parser in the sequence.
  * @tparam T10 the product type of the 10th parser in the sequence.
  * @param  _11 the 11th parser in the sequence.
  * @tparam T11 the product type of the 11th parser in the sequence.
  * @param  _12 the 12th parser in the sequence.
  * @tparam T12 the product type of the 12th parser in the sequence.
  * @param  _13 the 13th parser in the sequence.
  * @tparam T13 the product type of the 13th parser in the sequence.
  * @param  _14 the 14th parser in the sequence.
  * @tparam T14 the product type of the 14th parser in the sequence.
  * @param  _15 the 15th parser in the sequence.
  * @tparam T15 the product type of the 15th parser in the sequence.
  * @param  _16 the 16th parser in the sequence.
  * @tparam T16 the product type of the 16th parser in the sequence.
  */
case class SequenceParser16[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16](
  _1: Parser[T1], _2: Parser[T2], _3: Parser[T3], _4: Parser[T4], _5: Parser[T5], _6: Parser[T6], _7: Parser[T7], _8: Parser[T8], _9: Parser[T9], _10: Parser[T10], _11: Parser[T11], _12: Parser[T12], _13: Parser[T13], _14: Parser[T14], _15: Parser[T15], _16: Parser[T16]
) extends Product16[Parser[T1], Parser[T2], Parser[T3], Parser[T4], Parser[T5], Parser[T6], Parser[T7], Parser[T8], Parser[T9], Parser[T10], Parser[T11], Parser[T12], Parser[T13], Parser[T14], Parser[T15], Parser[T16]]
     with Product
     with Parser[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)]
{
  def parse(context: ParsingContext): ParsingResult[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)] = {
    val rb = context.resultBuilder

    val r1 = _1.parse(context)
    if(r1.failed) return rb.failure

    val r2 = _2.parse(context)
    if(r2.failed) return rb.failure

    val r3 = _3.parse(context)
    if(r3.failed) return rb.failure

    val r4 = _4.parse(context)
    if(r4.failed) return rb.failure

    val r5 = _5.parse(context)
    if(r5.failed) return rb.failure

    val r6 = _6.parse(context)
    if(r6.failed) return rb.failure

    val r7 = _7.parse(context)
    if(r7.failed) return rb.failure

    val r8 = _8.parse(context)
    if(r8.failed) return rb.failure

    val r9 = _9.parse(context)
    if(r9.failed) return rb.failure

    val r10 = _10.parse(context)
    if(r10.failed) return rb.failure

    val r11 = _11.parse(context)
    if(r11.failed) return rb.failure

    val r12 = _12.parse(context)
    if(r12.failed) return rb.failure

    val r13 = _13.parse(context)
    if(r13.failed) return rb.failure

    val r14 = _14.parse(context)
    if(r14.failed) return rb.failure

    val r15 = _15.parse(context)
    if(r15.failed) return rb.failure

    val r16 = _16.parse(context)
    if(r16.failed) return rb.failure

    rb.success((r1.product, r2.product, r3.product, r4.product, r5.product, r6.product, r7.product, r8.product, r9.product, r10.product, r11.product, r12.product, r13.product, r14.product, r15.product, r16.product))
  }
}

object SequenceParser16 {
  implicit def sequencingHeuristic[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, A]: SequencingHeuristic[
    /*  left: */ SequenceParser16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16],
    /* right: */ Parser[A],
    /*  dest: */ SequenceParser
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser(l._1, l._2, l._3, l._4, l._5, l._6, l._7, l._8, l._9, l._10, l._11, l._12, l._13, l._14, l._15, l._16, r))
}