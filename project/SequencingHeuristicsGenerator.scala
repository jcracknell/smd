import sbt._

class SequencingHeuristicsGenerator extends FileGenerator(_/"smd"/"parsing"/"SequencingHeuristics.scala") {
  import SequenceParserNGenerator._

  def content: String =
    s"""
    |package smd
    |package parsing
    |
    |${autoGenerated}
    |
    |trait Tier1SequencingHeuristics extends Tier2SequencingHeuristics {
    |${(2 to SequenceParserNGenerator.MaxN - 1).map(tier1(_)).mkString("")}
    |}
    |
    |trait Tier3SequencingHeuristics extends Tier4SequencingHeuristics {
    |${(2 to SequenceParserNGenerator.MaxN - 1).map(tier3(_)).mkString("")}
    |
    |  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.Parser]]
         * on the left with an [[${qualifiedClassName(MaxN)}]] to its right into a single [[smd.parsing.SequenceParser]]. */
    |  implicit def sequencingHeuristic_L_${MaxN}[L, ${lst("T", 1 to MaxN)}]: SequencingHeuristic[
    |    /*  left: */ Parser[L],
    |    /* right: */ ${className(MaxN)}[${lst("T", 1 to MaxN)}],
    |    /*  dest: */ SequenceParser
    |  ] =
    |    create((l, r) => SequenceParser(l, ${lst("r.p", 1 to MaxN)}))
    |
    |  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[${qualifiedClassName(MaxN)}]]
    |    * on the left with an [[smd.parsing.Parser]] to its right into a single [[smd.parsing.SequenceParser]]. */
    |  implicit def sequencingHeuristic_${MaxN}_R[${lst("T", 1 to MaxN)}, R]: SequencingHeuristic[
    |    /*  left: */ ${className(MaxN)}[${lst("T", 1 to MaxN)}],
    |    /* right: */ Parser[R],
    |    /*  dest: */ SequenceParser
    |  ] =
    |    create((l, r) => SequenceParser(${lst("l.p", 1 to MaxN)}, r))
    |
    |  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.Parser]]
    |    * on the left with an [[smd.parsing.SequenceParser]] to its right into a single [[smd.parsing.SequenceParser]]. */
    |  implicit def sequencingHeuristic_L_Seq[L]: SequencingHeuristic[
    |    /*  left: */ Parser[L],
    |    /* right: */ SequenceParser,
    |    /*  dest: */ SequenceParser
    |  ] =
    |    create((l, r) => SequenceParser(l +: r.sequence))
    |
    |  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.SequenceParser]]
    |    * on the left with an [[smd.parsing.Parser]] to its right into a single [[smd.parsing.SequenceParser]]. */
    |  implicit def sequencingHeuristic_Seq_R[R]: SequencingHeuristic[
    |    /*  left: */ SequenceParser,
    |    /* right: */ Parser[R],
    |    /*  dest: */ SequenceParser
    |  ] =
    |    create((l, r) => SequenceParser(l.sequence :+ r))
    |
    |}
    """.trim.stripMargin

  def tier1(n: Int): String = s"""
    |${(2 to SequenceParserNGenerator.MaxN - n).map({ i => s"""
    |
    |  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[${qualifiedClassName(n)}]]
    |    * on the left-hand side with an [[${qualifiedClassName(i)}]] to its right into an [[${qualifiedClassName(n+i)}]]. */
    |  implicit def sequencingHeuristic_${n}_${i}[${lst("L", 1 to n)}, ${lst("R", 1 to i)}]: SequencingHeuristic[
    |    /*  left: */ ${className(n)}[${lst("L", 1 to n)}],
    |    /* right: */ ${className(i)}[${lst("R", 1 to i)}],
    |    /*  dest: */ ${className(n+i)}[${lst("L", 1 to n)}, ${lst("R", 1 to i)}]
    |  ] =
    |    create((l, r) => ${className(n+i)}(${lst("l.p", 1 to n)}, ${lst("r.p", 1 to i)}))
    |
    """.trim.stripMargin }).mkString("")}
    """.trim.stripMargin

  def tier3(n: Int): String = s"""
    |
    |  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    |    * on the left-hand side with an [[${qualifiedClassName(n)}]] to its right into an [[${qualifiedClassName(n+1)}]]. */
    |  implicit def sequencingHeuristic_L_${n}[L, ${lst("T", 1 to n)}]: SequencingHeuristic[
    |    /*  left: */ Parser[L],
    |    /* right: */ ${className(n)}[${lst("T", 1 to n)}],
    |    /*  dest: */ ${className(n+1)}[L, ${lst("T", 1 to n)}]
    |  ] =
    |    create((l, r) => SequenceParser${n+1}(l, ${lst("r.p", 1 to n)}))
    |
    |  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[${qualifiedClassName(n)}]]
    |    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[${qualifiedClassName(n+1)}]]. */
    |  implicit def sequencingHeuristic_${n}_R[${lst("T", 1 to n)}, R]: SequencingHeuristic[
    |    /*  left: */ ${className(n)}[${lst("T", 1 to n)}],
    |    /* right: */ Parser[R],
    |    /*  dest: */ ${className(n+1)}[${lst("T", 1 to n)}, R]
    |  ] =
    |    create((l, r) => SequenceParser${n+1}(${lst("l.p", 1 to n)}, r))
    |
    """.trim.stripMargin
}
