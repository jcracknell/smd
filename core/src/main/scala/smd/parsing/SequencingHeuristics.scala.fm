package smd
package parsing

// This file is automatically generated from a freemarker template.
// Template: ${.template_name}
// Last Generated: ${.now}

<#assign MaxN=16>
trait Tier1SequencingHeuristics extends Tier2SequencingHeuristics {
  <#list 2..(MaxN-2) as l>
  <#list 2..(MaxN-l) as r>
  <#assign LS><#list 1..l as i>L${i}<#if i_has_next>, </#if></#list></#assign>
  <#assign RS><#list 1..r as i>R${i}<#if i_has_next>, </#if></#list></#assign>

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser${l}]]
    * on the left-hand side with an [[smd.parsing.SequenceParser${r}]] to its right into an [[smd.parsing.SequenceParser${l+r}]]. */
  implicit def sequencingHeuristic_${l}_${r}[${LS}, ${RS}]: SequencingHeuristic[
    /*  left: */ SequenceParser${l}[${LS}],
    /* right: */ SequenceParser${r}[${RS}],
    /*  dest: */ SequenceParser${l+r}[${LS}, ${RS}]
  ] =
    create { (l, r) => SequenceParser${l+r}(<#list 1..l as i>l.p${i}, </#list><#list 1..r as i>r.p${i}<#if i_has_next>, </#if></#list>) }
  </#list>
  </#list>
}

trait Tier3SequencingHeuristics extends Tier4SequencingHeuristics {

  <#list 2..(MaxN-1) as n>
  <#assign RS><#list 1..n as i>R${i}<#if i_has_next>, </#if></#list></#assign>
  <#assign LS><#list 1..n as i>L${i}<#if i_has_next>, </#if></#list></#assign>

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser${n}]] to its right into an [[smd.parsing.SequenceParser${n+1}]]. */
  implicit def sequencingHeuristic_L_${n}[L, ${RS}]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser${n}[${RS}],
    /*  dest: */ SequenceParser${n+1}[L, ${RS}]
  ] =
    create { (l, r) => SequenceParser${n+1}(l, <#list 1..n as i>r.p${i}<#if i_has_next>, </#if></#list>) }

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser${n}]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser${n+1}]]. */
  implicit def sequencingHeuristic_${n}_R[${LS}, R]: SequencingHeuristic[
    /*  left: */ SequenceParser${n}[${LS}],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser${n+1}[${LS}, R]
  ] =
    create { (l, r) => SequenceParser${n+1}(<#list 1..n as i>l.p${i}, </#list>r) }
  </#list>

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.Parser]]
    * on the left with an [[smd.parsing.SequenceParser${MaxN}]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_L_${MaxN}[L<#list 1..MaxN as i>, R${i}</#list>]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser${MaxN}[<#list 1..MaxN as i>R${i}<#if i_has_next>, </#if></#list>],
    /*  dest: */ SequenceParser
  ] =
    create { (l, r) => SequenceParser(l +: r.sequence) }

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser${MaxN}]]
    * on the left with an [[smd.parsing.Parser]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_${MaxN}_R[<#list 1..MaxN as i>L${i}, </#list>R]: SequencingHeuristic[
    /*  left: */ SequenceParser${MaxN}[<#list 1..MaxN as i>L${i}<#if i_has_next>, </#if></#list>],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser
  ] =
    create { (l, r) => SequenceParser(l.sequence :+ r) }

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.Parser]]
    * on the left with an [[smd.parsing.SequenceParser]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_L_Seq[L]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser,
    /*  dest: */ SequenceParser
  ] =
    create { (l, r) => SequenceParser(l +: r.sequence) }

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.SequenceParser]]
    * on the left with an [[smd.parsing.Parser]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_Seq_R[R]: SequencingHeuristic[
    /*  left: */ SequenceParser,
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser
  ] =
    create { (l, r) => SequenceParser(l.sequence :+ r) }
}
