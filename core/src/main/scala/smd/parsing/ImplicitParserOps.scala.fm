package smd
package parsing

// This file is automatically generated from a freemarker template.
// Template: ${.template_name}
// Last Generated: ${.now}

/** Trait defining implicit classes adding operators to parsers producing tuple values. */
trait ImplicitParserOps {
  // TODO: Check if restriction on inner classes in value classes has been lifted

  <#list 2..16 as n>
  <#assign TS><#list 1..n as i>T${i}<#if i_has_next>, </#if></#list></#assign>

  /** Implicit class adding operators to parsers producing [[scala.Tuple${n}]] values. */
  implicit class UpgrayeddedTupleParser${n}[${TS}](val parser: Parser[(${TS})]) {
    /** Apply a transformation to the [[scala.Tuple${n}]] produced by the [[smd.parsing.Parser]] if parsing is successful.
      *
      * @param transform the transformation to be applied to the product [[scala.Tuple${n}]].
      * @tparam B the transformed product type.
      */
    def ^~ [B](transform: (${TS}) => B): Parser[B] = parser ^*^ transform.tupled
  }
  </#list>
}
