package smd
package grammar

import smd.expression._
import smd.parsing.ParsingScenarios

class LiteralExpressionProductionsSpec extends ParsingScenarios {
  def subject = Grammar.literalExpression
  import Grammar.literalExpression

  describe("null literal") {
    parsing("null") as Grammar.literalExpression should produce (NullLiteral())
  }
  describe("numeric literals") {
    parsing("0")      as Grammar.literalExpression should produce (NumericLiteral(0d))
    parsing(".0123")  as Grammar.literalExpression should produce (NumericLiteral(0.0123d))
    parsing("12.345") as Grammar.literalExpression should produce (NumericLiteral(12.345d))
    parsing("12e1")   as Grammar.literalExpression should produce (NumericLiteral(120d))
    parsing("12E2")   as Grammar.literalExpression should produce (NumericLiteral(1200d))
    parsing("0x1234") as Grammar.literalExpression should produce (NumericLiteral(0x1234.toDouble))
  }
  describe("string literals") {
    parsing("''")           as literalExpression should produce (StringLiteral(""))
    parsing("\"\"")         as literalExpression should produce (StringLiteral(""))
    parsing("``")           as literalExpression should produce (VerbatimLiteral(""))
    parsing("'a'")          as literalExpression should produce (StringLiteral("a"))
    parsing("\"a\"")        as literalExpression should produce (StringLiteral("a"))
    parsing("`a`")          as literalExpression should produce (VerbatimLiteral("a"))
    parsing("````````````a````````````") as literalExpression should produce (VerbatimLiteral("a"))
    parsing("'\\0z'")       as literalExpression should produce (StringLiteral("0z"))
    parsing("`\\0z`")       as literalExpression should produce (VerbatimLiteral("\\0z"))
    parsing("'\\x00z'")     as literalExpression should produce (StringLiteral("\0z"))
    parsing("`\\x00z`")     as literalExpression should produce (VerbatimLiteral("\\x00z"))
    parsing("'\\x4a'")      as literalExpression should produce (StringLiteral("J"))
    parsing("`\\x4z`")      as literalExpression should produce (VerbatimLiteral("\\x4z"))
    parsing("'\\u0000z'")   as literalExpression should produce (StringLiteral("\0z"))
    parsing("'\\x0000z'")   as literalExpression should produce (StringLiteral("\0z"))
    parsing("'\\#u0000z'")  as literalExpression should produce (StringLiteral("\0z"))
    parsing("'\\#x0000z'")  as literalExpression should produce (StringLiteral("\0z"))
    parsing("'\\u0000;z'")  as literalExpression should produce (StringLiteral("\0z"))
    parsing("'\\x0000;z'")  as literalExpression should produce (StringLiteral("\0z"))
    parsing("`\\u0000z`")   as literalExpression should produce (VerbatimLiteral("\\u0000z"))
    parsing("'\\u004a'")    as literalExpression should produce (StringLiteral("J"))
    parsing("'\\#u4a'")     as literalExpression should produce (StringLiteral("J"))
    parsing("'\\#u4a;'")    as literalExpression should produce (StringLiteral("J"))
    parsing("'\\u4a;'")     as literalExpression should produce (StringLiteral("J"))
    parsing("`\\u004z`")    as literalExpression should produce (VerbatimLiteral("\\u004z"))
    parsing("'\\eacutez'")  as literalExpression should produce (StringLiteral("eacutez"))
    parsing("'\\eacute;z'") as literalExpression should produce (StringLiteral("éz"))
  }
  describe("iri literals") {
    parsing("nullish") as literalExpression should produce (IriLiteral("nullish"))
    parsing("trueish") as literalExpression should produce (IriLiteral("trueish"))
    parsing("falsey") as literalExpression should produce (IriLiteral("falsey"))
    parsing("http://www.google.com") as literalExpression should produce (IriLiteral("http://www.google.com"))
    parsing("http://msdn.microsoft.com/en-us/library/a6td98xe(v=vs.71).aspx") as literalExpression should produce (IriLiteral("http://msdn.microsoft.com/en-us/library/a6td98xe(v=vs.71).aspx"))
    //parsing("http://msdn.microsoft.com/en-us/library/a6td98xev=vs.71).aspx") as literalExpression should produce (IriLiteral("http://msdn.microsoft.com/en-us/library/a6td98xev=vs.71"))
    parsing("http://bücher.de/") as literalExpression should produce (IriLiteral("http://bücher.de/"))
    parsing("my:irn:scheme:24") as literalExpression should produce (IriLiteral("my:irn:scheme:24"))
    parsing("http://www.cracknell.ca") as literalExpression should produce (IriLiteral("http://www.cracknell.ca"))
    parsing("http://www.cracknell.ca/") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/"))
    parsing("http://www.cracknell.ca/some/path") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/some/path"))
    parsing("http://www.cracknell.ca?q=bla") as literalExpression should produce (IriLiteral("http://www.cracknell.ca?q=bla"))
    parsing("http://www.cracknell.ca#fragment") as literalExpression should produce (IriLiteral("http://www.cracknell.ca#fragment"))
    parsing("http://www.cracknell.ca/some/path?q=bla") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/some/path?q=bla"))
    parsing("http://www.cracknell.ca/some/path#fragment") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/some/path#fragment"))
    parsing("http://www.cracknell.ca/some/path?q=bla#fragment") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/some/path?q=bla#fragment"))
    parsing("www.cracknell.ca") as literalExpression should produce (IriLiteral("www.cracknell.ca"))
    parsing("www.cracknell.ca/") as literalExpression should produce (IriLiteral("www.cracknell.ca/"))
    parsing("www.cracknell.ca/some/path") as literalExpression should produce (IriLiteral("www.cracknell.ca/some/path"))
    parsing("www.cracknell.ca?q=bla") as literalExpression should produce (IriLiteral("www.cracknell.ca?q=bla"))
    parsing("www.cracknell.ca#fragment") as literalExpression should produce (IriLiteral("www.cracknell.ca#fragment"))
    parsing("www.cracknell.ca/some/path?q=bla") as literalExpression should produce (IriLiteral("www.cracknell.ca/some/path?q=bla"))
    parsing("www.cracknell.ca/some/path#fragment") as literalExpression should produce (IriLiteral("www.cracknell.ca/some/path#fragment"))
    parsing("www.cracknell.ca/some/path?q=bla#fragment") as literalExpression should produce (IriLiteral("www.cracknell.ca/some/path?q=bla#fragment"))
    parsing("james@www.cracknell.ca") as literalExpression should produce (IriLiteral("james@www.cracknell.ca"))
    parsing("www.cracknell.ca:80") as literalExpression should produce (IriLiteral("www.cracknell.ca:80"))
    parsing("james@www.cracknell.ca:80") as literalExpression should produce (IriLiteral("james@www.cracknell.ca:80"))
    parsing("123.234.210.10") as literalExpression should produce (IriLiteral("123.234.210.10"))
    parsing("james@123.234.210.10") as literalExpression should produce (IriLiteral("james@123.234.210.10"))
    parsing("123.234.210.10:80") as literalExpression should produce (IriLiteral("123.234.210.10:80"))
    parsing("james@123.234.210.10:80") as literalExpression should produce (IriLiteral("james@123.234.210.10:80"))
    parsing("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]") as literalExpression should produce (IriLiteral("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]"))
    parsing("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]") as literalExpression should produce (IriLiteral("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]"))
    parsing("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80") as literalExpression should produce (IriLiteral("[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80"))
    parsing("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80") as literalExpression should produce (IriLiteral("james@[FEDC:BA98:7654:3210:0123:4567:89AB:CDEF]:80"))
    parsing("/") as literalExpression should produce (IriLiteral("/"))
    parsing("/some/path") as literalExpression should produce (IriLiteral("/some/path"))
    parsing("/some/path/") as literalExpression should produce (IriLiteral("/some/path/"))
    parsing("/?q=bla") as literalExpression should produce (IriLiteral("/?q=bla"))
    parsing("/#fragment") as literalExpression should produce (IriLiteral("/#fragment"))
    parsing("/some/path?q=bla") as literalExpression should produce (IriLiteral("/some/path?q=bla"))
    parsing("/some/path#fragment") as literalExpression should produce (IriLiteral("/some/path#fragment"))
    parsing("/some/path?q=bla#fragment") as literalExpression should produce (IriLiteral("/some/path?q=bla#fragment"))
    parsing("path") as literalExpression should produce (IriLiteral("path"))
    parsing("some/path") as literalExpression should produce (IriLiteral("some/path"))
    parsing("?q=bla") as literalExpression should produce (IriLiteral("?q=bla"))
    parsing("#fragment") as literalExpression should produce (IriLiteral("#fragment"))
    parsing("some/path?q=bla") as literalExpression should produce (IriLiteral("some/path?q=bla"))
    parsing("some/path#fragment") as literalExpression should produce (IriLiteral("some/path#fragment"))
    parsing("some/path?q=bla#fragment") as literalExpression should produce (IriLiteral("some/path?q=bla#fragment"))
    //parsing("http://www.cracknell.ca/a,") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/a,"))
    parsing("http://www.cracknell.ca/a,a") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/a,a"))
    //parsing("http://www.cracknell.ca?q=a,") as literalExpression should produce (IriLiteral("http://www.cracknell.ca?q=a,"))
    parsing("http://www.cracknell.ca?q=a,a") as literalExpression should produce (IriLiteral("http://www.cracknell.ca?q=a,a"))
    //parsing("http://www.cracknell.ca/a:") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/a:"))
    parsing("http://www.cracknell.ca/a:a") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/a:a"))
    //parsing("http://www.cracknell.ca?q=a:") as literalExpression should produce (IriLiteral("http://www.cracknell.ca?q=a:"))
    parsing("http://www.cracknell.ca?q=a:a") as literalExpression should produce (IriLiteral("http://www.cracknell.ca?q=a:a"))
    //parsing("http://www.cracknell.ca/a;") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/a;"))
    parsing("http://www.cracknell.ca/a;a") as literalExpression should produce (IriLiteral("http://www.cracknell.ca/a;a"))
    //parsing("http://www.cracknell.ca?q=a;") as literalExpression should produce (IriLiteral("http://www.cracknell.ca?q=a;"))
    parsing("http://www.cracknell.ca?q=a;a") as literalExpression should produce (IriLiteral("http://www.cracknell.ca?q=a;a"))
    parsing("abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd") as literalExpression should produce (IriLiteral("abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd"))
    parsing("123.123.123.123") as literalExpression should produce (IriLiteral("123.123.123.123"))
    parsing("1.1.1.1") as literalExpression should produce (IriLiteral("1.1.1.1"))
    parsing("0.0.0.0") as literalExpression should produce (IriLiteral("0.0.0.0"))

    // RFC 2732 example IPv6 urls
    parsing("http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html") as literalExpression should produce (IriLiteral("http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"))
    parsing("http://[1080:0:0:0:8:800:200C:417A]/index.html") as literalExpression should produce (IriLiteral("http://[1080:0:0:0:8:800:200C:417A]/index.html"))
    parsing("http://[3ffe:2a00:100:7031::1]") as literalExpression should produce (IriLiteral("http://[3ffe:2a00:100:7031::1]"))
    parsing("http://[1080::8:800:200C:417A]/foo") as literalExpression should produce (IriLiteral("http://[1080::8:800:200C:417A]/foo"))
    parsing("http://[::192.9.5.5]/ipng") as literalExpression should produce (IriLiteral("http://[::192.9.5.5]/ipng"))
    parsing("http://[::FFFF:129.144.52.38]:80/index.html") as literalExpression should produce (IriLiteral("http://[::FFFF:129.144.52.38]:80/index.html"))
    parsing("http://[2010:836B:4179::836B:4179]") as literalExpression should produce (IriLiteral("http://[2010:836B:4179::836B:4179]"))
    // RFC 2732 example IPv6 urls with no scheme
    parsing("[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html") as literalExpression should produce (IriLiteral("[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"))
    parsing("[1080:0:0:0:8:800:200C:417A]/index.html") as literalExpression should produce (IriLiteral("[1080:0:0:0:8:800:200C:417A]/index.html"))
    parsing("[3ffe:2a00:100:7031::1]") as literalExpression should produce (IriLiteral("[3ffe:2a00:100:7031::1]"))
    parsing("[1080::8:800:200C:417A]/foo") as literalExpression should produce (IriLiteral("[1080::8:800:200C:417A]/foo"))
    parsing("[::192.9.5.5]/ipng") as literalExpression should produce (IriLiteral("[::192.9.5.5]/ipng"))
    parsing("[::FFFF:129.144.52.38]:80/index.html") as literalExpression should produce (IriLiteral("[::FFFF:129.144.52.38]:80/index.html"))
    parsing("[2010:836B:4179::836B:4179]") as literalExpression should produce (IriLiteral("[2010:836B:4179::836B:4179]"))
  }
}
