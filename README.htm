<h1 id="" class="smd-heading" data-smd-heading-level="1">
  SMD
</h1>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(toc),List())</pre>
</div>
<h2 id="" class="smd-heading" data-smd-heading-level="2">
  Summary of Omissions and Extensions
</h2>
<p>
  SMD implements a markdown dialect which deviates substantially from <a href="">the original syntax</a> developped by John Gruber, but endeavours to conform in spirit; defining a lightweight markup language which is easy to understand and whose rendered output closely resembles the input text (insofar as this is possible).
</p>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Omissions
</h3>
<ul class="smd-ul-tight">
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Underscore syntax for bold and italic text.
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Image embedding of the form <code>![title](href)</code>, as this functionality is better handled as a macro.
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Embedded HTML.
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Indented code blocks; a feature I like to describe as <q class="single">easy to invoke by accident, yet difficult to use with purpose</q>.
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      <q class="single">Setext</q> (underlined) headings, which have been omitted as it is silly to have an alternative heading syntax supporting only two levels.
    </div>
    
  </li>
  
</ul>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Extensions
</h3>
<ul class="smd-ul-tight">
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      <a href="">Superscript and subscript</a>, as seen in pandoc.
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      C-style comments, both single and multi-line
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      <a href="">Definition Lists</a>, as seen in PHP Markdown Extra/reStructuredText/pandoc
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      <a href="">Pipe tables</a>, as seen in PHP Markdown Extra
    </div>
    
  </li>
  
</ul>
<h2 id="" class="smd-heading" data-smd-heading-level="2">
  Span Syntax
</h2>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Strong and Emphasis
</h3>
<p>
  A span of text can <em>emphasized</em> or marked as <strong>strong</strong> by enclosing it in asterixes (<code>*</code>). Emphasis and strong are typically rendered using italicized and bold text respectively.
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(*emphasized* and **strong** text))))</pre>
</div>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Links
</h3>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral([google](http://www.google.com)))))</pre>
</div>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Subscript and Superscript
</h3>
<p>
  Text can be made subscript or superscript by enclosing it with tilde (<code>~</code>) or caret (<code>^</code>) characters respectively. Subscript and superscript text may not directly contain spaces, however more complex content can by offset from the baseline by enclosing the content in an interpolated markdown literal.
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(H~2~0 January 1^st^))))</pre>
</div>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Code
</h3>
<p>
  Enclosing a snippet of text with a sequence of between 1 and 16 backtick characters (<code>`</code>) creates a code snippet. A code snippet preserves the formatting of the enclosed text verbatim, ignoring all escape sequences and markup. A code snippet cannot span multiple lines.
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(`12 * 12 = 144`))))</pre>
</div>
<p>
  A single space character is discarded following the opening backtick sequence and preceding the closing sequence to handle snippets beginning or ending with a backtick.
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(`` `echo &quot;Hello World!&quot;` ``))))</pre>
</div>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Entities
</h3>
<p>
  Entities are <q class="double">escape sequences</q> can be used to insert hard-to-type glyphs into a document or to prevent a character from being interpreted as markdown syntax. The following entity syntax is supported:
</p>
<ul class="smd-ul-tight">
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Named HTML entities of the form <code>\eacute;</code>
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Decimal escapes for UTF-32 codepoints of up to 24 bits (6 decimal digits) of the form <code>\#000233;</code>
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Hexadecimal escapes for UTF-32 codepoints of up to 24 bits (6 hexadecimal digits) of the form <code>\#uE9;</code>, <code>\u00E9;</code>, <code>\#x000000e9;</code> or <code>\xe9;</code>
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      Literal escapes for the lower-ASCII symbols of the form <code>\$</code>
    </div>
    
  </li>
  
</ul>
<p>
  The presence of the semicolon is optional in all cases save that of a named HTML entity, however it can be useful to disambiguate the end of the entity from the surrounding text.
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(
\eacute; \Eacute; \u82; \#130;
))))</pre>
</div>
<p>
  Literal escapes are useful to prevent symbols from being interpreted as markdown syntax. For example, writing <code>\*</code> will produce a literal asterix, preventing the asterix from being interpreted as emphasis.
</p>
<p>
  Note that named entities are case sensitive, as the case often determines the resulting glyph. For example, <code>\eacute;</code> maps to <q class="double">&#233; - U+00E9 LATIN SMALL LETTER E WITH ACUTE</q>, whereas <code>\Eacute;</code> maps to <q class="double">&#201; - U+00C9 LATIN CAPITAL LETTER E WITH ACUTE</q>.
</p>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Line Breaks
</h3>
<p>
  An explicit line break can be introduced by preceding the end of a line with the escape character (<code>\</code>).
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(
Line 1,
still line 1 \
line 2.
))))</pre>
</div>
<h2 id="" class="smd-heading" data-smd-heading-level="2">
  Block Syntax
</h2>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Paragraphs
</h3>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Headings
</h3>
<p>
  A heading is preceded by a variable number of pound characters (<code>#</code>) determining the level of the heading. Setext-style (underlined) headings as seen in other markdown dialects are unsupported.
</p>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Lists
</h3>
<p>
  List markers must be followed by at least one space.
</p>
<p>
  Lists can be either <em>tight</em> or <em>loose</em>. The items of a <em>tight</em> list contain span markup and cannot span multiple paragraphs:
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(
  * Item 1
  * Item 2
))))</pre>
</div>
<p>
  The items of a <em>loose</em> list can contain multiple paragraphs. A loose list is defined as <q class="single">a list which is not tight</q>; thus if a single empty line is introduced into a tight list, the entire list becomes loose:
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(
  * Item 1

  * Item 2
))))</pre>
</div>
<p>
  A block can be included into a preceding list element by <em>indenting</em> (at minimum) the first line of the block with a tab character or four spaces. This technique is used to create list items spanning multiple paragraphs and sublists:
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(
  * Item 1

    Still in item 1.

  * Item 2

Not in item 2.

  * Top-level list
      * Sublist item 1
      * Sublist item 2
))))</pre>
</div>
<h4 id="" class="smd-heading" data-smd-heading-level="4">
  Unordered Lists
</h4>
<p>
  As seen previously, an unordered list is denoted by a marker consisting of the <code>*</code>, <code>-</code> or <code>+</code> character. Your choice of marker character has no effect whatsoever.
</p>
<h4 id="" class="smd-heading" data-smd-heading-level="4">
  Ordered Lists
</h4>
<p>
  The following separator styles are supported:
</p>
<ul class="smd-ul-tight">
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      trailing-dot, of the form <code>1.</code>
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      trailing-parenthesis, of the form <code>1)</code>
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      enclosing-parentheses, of the form <code>(1)</code>
    </div>
    
  </li>
  
</ul>
<p>
  The following counter styles are supported:
</p>
<ul class="smd-ul-tight">
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      arabic (<code>1</code>, <code>2</code>, ...)
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      lower-alpha (<code>a</code>, <code>b</code>, ...)
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      upper-alpha (<code>A</code>, <code>B</code>, ...)
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      lower-roman (<code>i</code>, <code>ii</code>, ...)
    </div>
    
  </li>
  <li class="smd-ul-tight-item">
    <div class="smd-ul-tight-content">
      upper-roman (<code>I</code>, <code>II</code>, ...)
    </div>
    
  </li>
  
</ul>
<h4 id="" class="smd-heading" data-smd-heading-level="4">
  Definition Lists
</h4>
<h3 id="" class="smd-heading" data-smd-heading-level="3">
  Tables
</h3>
<p>
  SMD supports <q class="single">pipe tables</q> as seen in PHP Markdown Extra, and pandoc. This table syntax is intentionally restrictive in order to encourage the use of tables as a means of presenting data rather than as presentational elements.
</p>
<p>
  A table must contain an <em>alignment row</em> separating the header rows from the body of the table. The position of the colon (<code>:</code>) characters in the alignment row determines the alignment of all cells in the corresponding column. If the colon is omitted or the number of columns exceeds those specified in the alignment row, then columns are left-aligned by default.
</p>
<p>
  The cell separators of a table do not need to be aligned perfectly, but doing so will make the table much easier to read in its textual representation!
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(
| Left     |  Center  |    Right |
|:---------+:--------:+---------:|
| left     |  center  |    right |
))))</pre>
</div>
<p>
  The <code>+</code> and <code>=</code> characters are interchangeable with <code>|</code> and <code>-</code> respectively on the alignment row only, so that you can indulge your artistic sensibilities to some small degree. Table cells can be spanned to multiple columns by repeating the separator following the cell:
</p>
<div class="smd-expression-block">
  <pre class="smd-markdown-expression">Application(Identifier(example),List(Argument(None,VerbatimLiteral(
|         Trial |     1    ||     2    ||
|     Component | Min | Max | Min | Max |
|--------------:+----:+----:+----:+----:|
|   Frobnicator |  23 |  42 |  20 |  56 |
| Confoobmotron |  57 | 130 |  63 | 112 |
))))</pre>
</div>
