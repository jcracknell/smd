package smd
package parsing

// This file is automatically generated by an SBT task
// Last Generated: 2013-09-18T04:47:11Z

/** Parses 4 expressions, providing strongly-typed results.
  * 
  * @param  p1  the 1st parser in the sequence.
  * @tparam T1  the product type of the 1st parser in the sequence.
  * @param  p2  the 2nd parser in the sequence.
  * @tparam T2  the product type of the 2nd parser in the sequence.
  * @param  p3  the 3rd parser in the sequence.
  * @tparam T3  the product type of the 3rd parser in the sequence.
  * @param  p4  the 4th parser in the sequence.
  * @tparam T4  the product type of the 4th parser in the sequence.
  */
case class SequenceParser4[+T1, +T2, +T3, +T4](
  p1: Parser[T1], p2: Parser[T2], p3: Parser[T3], p4: Parser[T4]
) extends SequenceParserLike[(T1, T2, T3, T4)]
{
  lazy val sequence: IndexedSeq[Parser[Any]] = IndexedSeq(p1, p2, p3, p4)

  def parse(context: ParsingContext): ParsingResult[(T1, T2, T3, T4)] = {
    val rb = context.resultBuilder

    val r1 = p1.parse(context)
    if(r1.failed) return rb.failure

    val r2 = p2.parse(context)
    if(r2.failed) return rb.failure

    val r3 = p3.parse(context)
    if(r3.failed) return rb.failure

    val r4 = p4.parse(context)
    if(r4.failed) return rb.failure

    rb.success((r1.product, r2.product, r3.product, r4.product))
  }
}