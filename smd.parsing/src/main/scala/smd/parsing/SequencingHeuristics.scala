package smd
package parsing

// This file is automatically generated by an SBT task
// Last Generated: 2013-10-10T04:36:10Z

trait Tier1SequencingHeuristics extends Tier2SequencingHeuristics {

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser4]]. */
  implicit def sequencingHeuristic_2_2[L1, L2, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser4[L1, L2, R1, R2]
  ] =
    create((l, r) => SequenceParser4(l.p1, l.p2, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser5]]. */
  implicit def sequencingHeuristic_2_3[L1, L2, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser5[L1, L2, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser5(l.p1, l.p2, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser6]]. */
  implicit def sequencingHeuristic_2_4[L1, L2, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser6[L1, L2, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser6(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser7]]. */
  implicit def sequencingHeuristic_2_5[L1, L2, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser7[L1, L2, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser7(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser8]]. */
  implicit def sequencingHeuristic_2_6[L1, L2, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser8[L1, L2, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser8(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_2_7[L1, L2, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser9[L1, L2, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser9(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_2_8[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser8[R1, R2, R3, R4, R5, R6, R7, R8],
    /*  dest: */ SequenceParser10[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser9]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_2_9[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser9[R1, R2, R3, R4, R5, R6, R7, R8, R9],
    /*  dest: */ SequenceParser11[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser10]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_2_10[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser10[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10],
    /*  dest: */ SequenceParser12[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser11]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_2_11[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser11[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11],
    /*  dest: */ SequenceParser13[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser12]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_2_12[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser12[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12],
    /*  dest: */ SequenceParser14[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser13]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_2_13[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser13[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13],
    /*  dest: */ SequenceParser15[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12, r.p13))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.SequenceParser14]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_2_14[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14]: SequencingHeuristic[
    /*  left: */ SequenceParser2[L1, L2],
    /* right: */ SequenceParser14[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14],
    /*  dest: */ SequenceParser16[L1, L2, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12, r.p13, r.p14))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser5]]. */
  implicit def sequencingHeuristic_3_2[L1, L2, L3, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser5[L1, L2, L3, R1, R2]
  ] =
    create((l, r) => SequenceParser5(l.p1, l.p2, l.p3, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser6]]. */
  implicit def sequencingHeuristic_3_3[L1, L2, L3, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser6[L1, L2, L3, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser6(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser7]]. */
  implicit def sequencingHeuristic_3_4[L1, L2, L3, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser7[L1, L2, L3, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser7(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser8]]. */
  implicit def sequencingHeuristic_3_5[L1, L2, L3, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser8[L1, L2, L3, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser8(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_3_6[L1, L2, L3, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser9[L1, L2, L3, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser9(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_3_7[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser10[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_3_8[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser8[R1, R2, R3, R4, R5, R6, R7, R8],
    /*  dest: */ SequenceParser11[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser9]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_3_9[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser9[R1, R2, R3, R4, R5, R6, R7, R8, R9],
    /*  dest: */ SequenceParser12[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser10]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_3_10[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser10[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10],
    /*  dest: */ SequenceParser13[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser11]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_3_11[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser11[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11],
    /*  dest: */ SequenceParser14[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser12]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_3_12[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser12[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12],
    /*  dest: */ SequenceParser15[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.SequenceParser13]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_3_13[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13]: SequencingHeuristic[
    /*  left: */ SequenceParser3[L1, L2, L3],
    /* right: */ SequenceParser13[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13],
    /*  dest: */ SequenceParser16[L1, L2, L3, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12, r.p13))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser6]]. */
  implicit def sequencingHeuristic_4_2[L1, L2, L3, L4, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser6[L1, L2, L3, L4, R1, R2]
  ] =
    create((l, r) => SequenceParser6(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser7]]. */
  implicit def sequencingHeuristic_4_3[L1, L2, L3, L4, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser7[L1, L2, L3, L4, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser7(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser8]]. */
  implicit def sequencingHeuristic_4_4[L1, L2, L3, L4, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser8[L1, L2, L3, L4, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser8(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_4_5[L1, L2, L3, L4, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser9[L1, L2, L3, L4, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser9(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_4_6[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser10[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_4_7[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser11[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_4_8[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser8[R1, R2, R3, R4, R5, R6, R7, R8],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser9]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_4_9[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser9[R1, R2, R3, R4, R5, R6, R7, R8, R9],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser10]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_4_10[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser10[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser11]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_4_11[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser11[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.SequenceParser12]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_4_12[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]: SequencingHeuristic[
    /*  left: */ SequenceParser4[L1, L2, L3, L4],
    /* right: */ SequenceParser12[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser7]]. */
  implicit def sequencingHeuristic_5_2[L1, L2, L3, L4, L5, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser7[L1, L2, L3, L4, L5, R1, R2]
  ] =
    create((l, r) => SequenceParser7(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser8]]. */
  implicit def sequencingHeuristic_5_3[L1, L2, L3, L4, L5, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser8[L1, L2, L3, L4, L5, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser8(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_5_4[L1, L2, L3, L4, L5, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser9[L1, L2, L3, L4, L5, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser9(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_5_5[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser10[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_5_6[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser11[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_5_7[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_5_8[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser8[R1, R2, R3, R4, R5, R6, R7, R8],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser9]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_5_9[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8, R9]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser9[R1, R2, R3, R4, R5, R6, R7, R8, R9],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8, R9]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser10]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_5_10[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser10[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.SequenceParser11]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_5_11[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]: SequencingHeuristic[
    /*  left: */ SequenceParser5[L1, L2, L3, L4, L5],
    /* right: */ SequenceParser11[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser8]]. */
  implicit def sequencingHeuristic_6_2[L1, L2, L3, L4, L5, L6, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser8[L1, L2, L3, L4, L5, L6, R1, R2]
  ] =
    create((l, r) => SequenceParser8(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_6_3[L1, L2, L3, L4, L5, L6, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser9[L1, L2, L3, L4, L5, L6, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser9(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_6_4[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser10[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_6_5[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser11[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_6_6[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_6_7[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_6_8[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7, R8]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser8[R1, R2, R3, R4, R5, R6, R7, R8],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7, R8]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser9]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_6_9[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7, R8, R9]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser9[R1, R2, R3, R4, R5, R6, R7, R8, R9],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7, R8, R9]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.SequenceParser10]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_6_10[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]: SequencingHeuristic[
    /*  left: */ SequenceParser6[L1, L2, L3, L4, L5, L6],
    /* right: */ SequenceParser10[R1, R2, R3, R4, R5, R6, R7, R8, R9, R10],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_7_2[L1, L2, L3, L4, L5, L6, L7, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser9[L1, L2, L3, L4, L5, L6, L7, R1, R2]
  ] =
    create((l, r) => SequenceParser9(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_7_3[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_7_4[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_7_5[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_7_6[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_7_7[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_7_8[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6, R7, R8]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser8[R1, R2, R3, R4, R5, R6, R7, R8],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6, R7, R8]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.SequenceParser9]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_7_9[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6, R7, R8, R9]: SequencingHeuristic[
    /*  left: */ SequenceParser7[L1, L2, L3, L4, L5, L6, L7],
    /* right: */ SequenceParser9[R1, R2, R3, R4, R5, R6, R7, R8, R9],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, R1, R2, R3, R4, R5, R6, R7, R8, R9]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_8_2[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser8[L1, L2, L3, L4, L5, L6, L7, L8],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_8_3[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser8[L1, L2, L3, L4, L5, L6, L7, L8],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_8_4[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser8[L1, L2, L3, L4, L5, L6, L7, L8],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_8_5[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser8[L1, L2, L3, L4, L5, L6, L7, L8],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_8_6[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser8[L1, L2, L3, L4, L5, L6, L7, L8],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_8_7[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser8[L1, L2, L3, L4, L5, L6, L7, L8],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_8_8[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5, R6, R7, R8]: SequencingHeuristic[
    /*  left: */ SequenceParser8[L1, L2, L3, L4, L5, L6, L7, L8],
    /* right: */ SequenceParser8[R1, R2, R3, R4, R5, R6, R7, R8],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, R1, R2, R3, R4, R5, R6, R7, R8]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser9]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_9_2[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser9[L1, L2, L3, L4, L5, L6, L7, L8, L9],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser9]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_9_3[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser9[L1, L2, L3, L4, L5, L6, L7, L8, L9],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser9]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_9_4[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser9[L1, L2, L3, L4, L5, L6, L7, L8, L9],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser9]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_9_5[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser9[L1, L2, L3, L4, L5, L6, L7, L8, L9],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser9]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_9_6[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser9[L1, L2, L3, L4, L5, L6, L7, L8, L9],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser9]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_9_7[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4, R5, R6, R7]: SequencingHeuristic[
    /*  left: */ SequenceParser9[L1, L2, L3, L4, L5, L6, L7, L8, L9],
    /* right: */ SequenceParser7[R1, R2, R3, R4, R5, R6, R7],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, L9, R1, R2, R3, R4, R5, R6, R7]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_10_2[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_10_3[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_10_4[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_10_5[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_10_6[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5, R6]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser11]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_11_2[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser11]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_11_3[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser11]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_11_4[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser11]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_11_5[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, R1, R2, R3, R4, R5]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, r.p1, r.p2, r.p3, r.p4, r.p5))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser12]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_12_2[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, R1, R2]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser12]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_12_3[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser12]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_12_4[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, R1, R2, R3, R4]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, r.p1, r.p2, r.p3, r.p4))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser13]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_13_2[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, R1, R2]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, l.p13, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser13]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_13_3[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, R1, R2, R3]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, l.p13, r.p1, r.p2, r.p3))
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser14]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_14_2[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, R1, R2]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, l.p13, l.p14, r.p1, r.p2))
}

trait Tier3SequencingHeuristics extends Tier4SequencingHeuristics {

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right into an [[smd.parsing.SequenceParser3]]. */
  implicit def sequencingHeuristic_L_2[L, T1, T2]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser2[T1, T2],
    /*  dest: */ SequenceParser3[L, T1, T2]
  ] =
    create((l, r) => SequenceParser3(l, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser2]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser3]]. */
  implicit def sequencingHeuristic_2_R[T1, T2, R]: SequencingHeuristic[
    /*  left: */ SequenceParser2[T1, T2],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser3[T1, T2, R]
  ] =
    create((l, r) => SequenceParser3(l.p1, l.p2, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right into an [[smd.parsing.SequenceParser4]]. */
  implicit def sequencingHeuristic_L_3[L, T1, T2, T3]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser3[T1, T2, T3],
    /*  dest: */ SequenceParser4[L, T1, T2, T3]
  ] =
    create((l, r) => SequenceParser4(l, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser3]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser4]]. */
  implicit def sequencingHeuristic_3_R[T1, T2, T3, R]: SequencingHeuristic[
    /*  left: */ SequenceParser3[T1, T2, T3],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser4[T1, T2, T3, R]
  ] =
    create((l, r) => SequenceParser4(l.p1, l.p2, l.p3, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right into an [[smd.parsing.SequenceParser5]]. */
  implicit def sequencingHeuristic_L_4[L, T1, T2, T3, T4]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser4[T1, T2, T3, T4],
    /*  dest: */ SequenceParser5[L, T1, T2, T3, T4]
  ] =
    create((l, r) => SequenceParser5(l, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser4]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser5]]. */
  implicit def sequencingHeuristic_4_R[T1, T2, T3, T4, R]: SequencingHeuristic[
    /*  left: */ SequenceParser4[T1, T2, T3, T4],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser5[T1, T2, T3, T4, R]
  ] =
    create((l, r) => SequenceParser5(l.p1, l.p2, l.p3, l.p4, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right into an [[smd.parsing.SequenceParser6]]. */
  implicit def sequencingHeuristic_L_5[L, T1, T2, T3, T4, T5]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser5[T1, T2, T3, T4, T5],
    /*  dest: */ SequenceParser6[L, T1, T2, T3, T4, T5]
  ] =
    create((l, r) => SequenceParser6(l, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser5]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser6]]. */
  implicit def sequencingHeuristic_5_R[T1, T2, T3, T4, T5, R]: SequencingHeuristic[
    /*  left: */ SequenceParser5[T1, T2, T3, T4, T5],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser6[T1, T2, T3, T4, T5, R]
  ] =
    create((l, r) => SequenceParser6(l.p1, l.p2, l.p3, l.p4, l.p5, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right into an [[smd.parsing.SequenceParser7]]. */
  implicit def sequencingHeuristic_L_6[L, T1, T2, T3, T4, T5, T6]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser6[T1, T2, T3, T4, T5, T6],
    /*  dest: */ SequenceParser7[L, T1, T2, T3, T4, T5, T6]
  ] =
    create((l, r) => SequenceParser7(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser6]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser7]]. */
  implicit def sequencingHeuristic_6_R[T1, T2, T3, T4, T5, T6, R]: SequencingHeuristic[
    /*  left: */ SequenceParser6[T1, T2, T3, T4, T5, T6],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser7[T1, T2, T3, T4, T5, T6, R]
  ] =
    create((l, r) => SequenceParser7(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser7]] to its right into an [[smd.parsing.SequenceParser8]]. */
  implicit def sequencingHeuristic_L_7[L, T1, T2, T3, T4, T5, T6, T7]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser7[T1, T2, T3, T4, T5, T6, T7],
    /*  dest: */ SequenceParser8[L, T1, T2, T3, T4, T5, T6, T7]
  ] =
    create((l, r) => SequenceParser8(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser7]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser8]]. */
  implicit def sequencingHeuristic_7_R[T1, T2, T3, T4, T5, T6, T7, R]: SequencingHeuristic[
    /*  left: */ SequenceParser7[T1, T2, T3, T4, T5, T6, T7],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser8[T1, T2, T3, T4, T5, T6, T7, R]
  ] =
    create((l, r) => SequenceParser8(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser8]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_L_8[L, T1, T2, T3, T4, T5, T6, T7, T8]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser8[T1, T2, T3, T4, T5, T6, T7, T8],
    /*  dest: */ SequenceParser9[L, T1, T2, T3, T4, T5, T6, T7, T8]
  ] =
    create((l, r) => SequenceParser9(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser8]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser9]]. */
  implicit def sequencingHeuristic_8_R[T1, T2, T3, T4, T5, T6, T7, T8, R]: SequencingHeuristic[
    /*  left: */ SequenceParser8[T1, T2, T3, T4, T5, T6, T7, T8],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser9[T1, T2, T3, T4, T5, T6, T7, T8, R]
  ] =
    create((l, r) => SequenceParser9(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser9]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_L_9[L, T1, T2, T3, T4, T5, T6, T7, T8, T9]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser9[T1, T2, T3, T4, T5, T6, T7, T8, T9],
    /*  dest: */ SequenceParser10[L, T1, T2, T3, T4, T5, T6, T7, T8, T9]
  ] =
    create((l, r) => SequenceParser10(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser9]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser10]]. */
  implicit def sequencingHeuristic_9_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, R]: SequencingHeuristic[
    /*  left: */ SequenceParser9[T1, T2, T3, T4, T5, T6, T7, T8, T9],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser10[T1, T2, T3, T4, T5, T6, T7, T8, T9, R]
  ] =
    create((l, r) => SequenceParser10(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser10]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_L_10[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10],
    /*  dest: */ SequenceParser11[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]
  ] =
    create((l, r) => SequenceParser11(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic_10_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R]: SequencingHeuristic[
    /*  left: */ SequenceParser10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R]
  ] =
    create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser11]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_L_11[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11],
    /*  dest: */ SequenceParser12[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]
  ] =
    create((l, r) => SequenceParser12(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser11]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser12]]. */
  implicit def sequencingHeuristic_11_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R]: SequencingHeuristic[
    /*  left: */ SequenceParser11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R]
  ] =
    create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser12]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_L_12[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12],
    /*  dest: */ SequenceParser13[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]
  ] =
    create((l, r) => SequenceParser13(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser12]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser13]]. */
  implicit def sequencingHeuristic_12_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R]: SequencingHeuristic[
    /*  left: */ SequenceParser12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R]
  ] =
    create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser13]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_L_13[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13],
    /*  dest: */ SequenceParser14[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]
  ] =
    create((l, r) => SequenceParser14(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12, r.p13))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser13]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser14]]. */
  implicit def sequencingHeuristic_13_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R]: SequencingHeuristic[
    /*  left: */ SequenceParser13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R]
  ] =
    create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, l.p13, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser14]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_L_14[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14],
    /*  dest: */ SequenceParser15[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]
  ] =
    create((l, r) => SequenceParser15(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12, r.p13, r.p14))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser14]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser15]]. */
  implicit def sequencingHeuristic_14_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R]: SequencingHeuristic[
    /*  left: */ SequenceParser14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R]
  ] =
    create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, l.p13, l.p14, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.Parser]]
    * on the left-hand side with an [[smd.parsing.SequenceParser15]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_L_15[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15],
    /*  dest: */ SequenceParser16[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]
  ] =
    create((l, r) => SequenceParser16(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12, r.p13, r.p14, r.p15))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser15]]
    * on the left-hand side with an [[smd.parsing.Parser]] to its right into an [[smd.parsing.SequenceParser16]]. */
  implicit def sequencingHeuristic_15_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R]: SequencingHeuristic[
    /*  left: */ SequenceParser15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R]
  ] =
    create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, l.p13, l.p14, l.p15, r))


  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.Parser]]
         * on the left with an [[smd.parsing.SequenceParser16]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_L_16[L, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16],
    /*  dest: */ SequenceParser
  ] =
    create((l, r) => SequenceParser(l, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6, r.p7, r.p8, r.p9, r.p10, r.p11, r.p12, r.p13, r.p14, r.p15, r.p16))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser16]]
    * on the left with an [[smd.parsing.Parser]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_16_R[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R]: SequencingHeuristic[
    /*  left: */ SequenceParser16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser
  ] =
    create((l, r) => SequenceParser(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, l.p11, l.p12, l.p13, l.p14, l.p15, l.p16, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.Parser]]
    * on the left with an [[smd.parsing.SequenceParser]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_L_Seq[L]: SequencingHeuristic[
    /*  left: */ Parser[L],
    /* right: */ SequenceParser,
    /*  dest: */ SequenceParser
  ] =
    create((l, r) => SequenceParser(l +: r.sequence))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine a [[smd.parsing.SequenceParser]]
    * on the left with an [[smd.parsing.Parser]] to its right into a single [[smd.parsing.SequenceParser]]. */
  implicit def sequencingHeuristic_Seq_R[R]: SequencingHeuristic[
    /*  left: */ SequenceParser,
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser
  ] =
    create((l, r) => SequenceParser(l.sequence :+ r))

}