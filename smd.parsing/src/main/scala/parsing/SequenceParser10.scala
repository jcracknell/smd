package smd
package parsing

// THIS FILE IS AUTOMATICALLY GENERATED
// Generated at: 2013-09-03T03:01:05Z

/** Parses 10 expressions, providing strongly-typed results.
  * 
  * @param  p1  the 1st parser in the sequence.
  * @tparam T1  the product type of the 1st parser in the sequence.
  * @param  p2  the 2nd parser in the sequence.
  * @tparam T2  the product type of the 2nd parser in the sequence.
  * @param  p3  the 3rd parser in the sequence.
  * @tparam T3  the product type of the 3rd parser in the sequence.
  * @param  p4  the 4th parser in the sequence.
  * @tparam T4  the product type of the 4th parser in the sequence.
  * @param  p5  the 5th parser in the sequence.
  * @tparam T5  the product type of the 5th parser in the sequence.
  * @param  p6  the 6th parser in the sequence.
  * @tparam T6  the product type of the 6th parser in the sequence.
  * @param  p7  the 7th parser in the sequence.
  * @tparam T7  the product type of the 7th parser in the sequence.
  * @param  p8  the 8th parser in the sequence.
  * @tparam T8  the product type of the 8th parser in the sequence.
  * @param  p9  the 9th parser in the sequence.
  * @tparam T9  the product type of the 9th parser in the sequence.
  * @param  p10 the 10th parser in the sequence.
  * @tparam T10 the product type of the 10th parser in the sequence.
  */
case class SequenceParser10[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10](
  p1: Parser[T1], p2: Parser[T2], p3: Parser[T3], p4: Parser[T4], p5: Parser[T5], p6: Parser[T6], p7: Parser[T7], p8: Parser[T8], p9: Parser[T9], p10: Parser[T10]
) extends AnyRef with Parser[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)]
{
  def parse(context: ParsingContext): ParsingResult[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)] = {
    val rb = context.resultBuilder

    val r1 = p1.parse(context)
    if(r1.failed) return rb.failure

    val r2 = p2.parse(context)
    if(r2.failed) return rb.failure

    val r3 = p3.parse(context)
    if(r3.failed) return rb.failure

    val r4 = p4.parse(context)
    if(r4.failed) return rb.failure

    val r5 = p5.parse(context)
    if(r5.failed) return rb.failure

    val r6 = p6.parse(context)
    if(r6.failed) return rb.failure

    val r7 = p7.parse(context)
    if(r7.failed) return rb.failure

    val r8 = p8.parse(context)
    if(r8.failed) return rb.failure

    val r9 = p9.parse(context)
    if(r9.failed) return rb.failure

    val r10 = p10.parse(context)
    if(r10.failed) return rb.failure

    rb.success((r1.product, r2.product, r3.product, r4.product, r5.product, r6.product, r7.product, r8.product, r9.product, r10.product))
  }
}

object SequenceParser10 {
  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * and an [[smd.parsing.Parser]] into an [[smd.parsing.SequenceParser11]]. */
  implicit def sequencingHeuristic[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ Parser[R],
    /*  dest: */ SequenceParser11[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R]
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser11(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser2]] to its right. */
  implicit def sequencingHeuristic_10_2[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser2[R1, R2],
    /*  dest: */ SequenceParser12[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2]
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser12(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser3]] to its right. */
  implicit def sequencingHeuristic_10_3[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser3[R1, R2, R3],
    /*  dest: */ SequenceParser13[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3]
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser13(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser4]] to its right. */
  implicit def sequencingHeuristic_10_4[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser4[R1, R2, R3, R4],
    /*  dest: */ SequenceParser14[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4]
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser14(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3, r.p4))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser5]] to its right. */
  implicit def sequencingHeuristic_10_5[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser5[R1, R2, R3, R4, R5],
    /*  dest: */ SequenceParser15[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5]
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser15(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3, r.p4, r.p5))

  /** Implicit [[smd.parsing.SequencingHeuristic]] which describes how to combine an [[smd.parsing.SequenceParser10]]
    * on the left-hand side with an [[smd.parsing.SequenceParser6]] to its right. */
  implicit def sequencingHeuristic_10_6[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5, R6]: SequencingHeuristic[
    /*  left: */ SequenceParser10[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10],
    /* right: */ SequenceParser6[R1, R2, R3, R4, R5, R6],
    /*  dest: */ SequenceParser16[L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, R1, R2, R3, R4, R5, R6]
  ] =
    SequencingHeuristic.create((l, r) => SequenceParser16(l.p1, l.p2, l.p3, l.p4, l.p5, l.p6, l.p7, l.p8, l.p9, l.p10, r.p1, r.p2, r.p3, r.p4, r.p5, r.p6))

}